version: "3.8"
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://yourip:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/etc/kafka
    depends_on:
      - zookeeper
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_USERNAME=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PWD}
      - xpack.security.enabled=true
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data:rw              # Persistence data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.11.1
    ports:
      - "25826:25826"
      - "5044:5044"
    environment:
      - ELASTIC_USERNAME=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PWD}
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro                # Pipeline configuration
    restart: on-failure
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.11.1
    environment:
      - XPACK_SECURITY_ENABLED=true
      - ELASTICSEARCH_USERNAME=${ELASTIC_USER}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PWD}
    ports:
      - "5601:5601"
    restart: on-failure
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.11.1
    volumes:
      - ./filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro # Configuration file
      - /var/lib/docker/containers:/var/lib/docker/containers:ro           # Docker logs
      - /var/run/docker.sock:/var/run/docker.sock:ro                       # Additional information about containers
      - ./filebeat/data:/usr/share/filebeat/data:rw                        # Persistence data
    user: root                                                             # Allow access to log files and docker.sock
    restart: on-failure
    depends_on:
      - logstash

  ulegalize-lawfirm:
    image: finauxa/ulegalize-lawfirm:x.x.x                                       # Allow access to log files and docker.sock
    network_mode: "host"
    restart: always
    ports:
      - "127.0.0.1:8989:8989"
    environment:
      - "spring.profiles.active=test"
      - "server.use-forward-headers=true"
      - "spring.kafka.bootstrap-servers=yourip:9092"
      - "spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='yourUser' password='my-secret';"
      - "spring.kafka.properties.sasl.mechanism=PLAIN"
      - "spring.kafka.properties.security.protocol=SASL_PLAINTEXT"
      - "spring.kafka.jaas.enabled=true"
      - "spring.kafka.producer.client-id=example"
      - "spring.kafka.listener.ack-mode=manual_immediate"
      - "app.cors.origin=https://yourdomain:7893,https://yourdomain"
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  ulegalize-reports:
    image: finauxa/ulegalize-reports:1.1.4                                       # Allow access to log files and docker.sock
    network_mode: "host"
    restart: always
    ports:
      - "127.0.0.1:5555:5555"
    environment:
      - "spring.profiles.active=test"
      - "server.use-forward-headers=true"
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"

  db:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: reboot
      MYSQL_DATABASE: avogest
    ports:
      - "3306:3306"
    volumes:
#     ask to the support to have a dump db
      - ./sql:/docker-entrypoint-initdb.d